// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}
// datasource db {
//     provider = "mysql"
//     // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
//     // Further reading:
//     // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
//     // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
//     url      = env("DATABASE_URL")
// }

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?   @db.Text
    website      String?
    company      String?
    openaiApiKey String?
    niche        String?
    country     String?
    createdAt   DateTime @default(now())

    stripeCustomerId String?
    trialClaimed      Boolean? @default(false)
    plan        String?

    accounts      Account[]
    sessions      Session[]
    UserToken     UserToken[]
    History       History[]
    WordpressWebsite WordpressWebsite[]
}

model UserToken {
    id        String   @id @default(cuid())
    userId    String
    type      String
    token     String
    expires   DateTime
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model WordpressWebsite {
    id String @id @default(cuid())
    userId String
    websiteName String
    websiteLink String
    username String
    password String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model History{
    id String @id @default(cuid())
    userId String
    title String
    outline String @db.Text
    content String? @db.Text
    topic String?
    keyword String?
    audience String?
    language String?
    location String?
    tone String?
    model String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
